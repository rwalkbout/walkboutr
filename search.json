[{"path":"https://rwalkbout.github.io/walkboutr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"BSD 3-clause license","title":"BSD 3-clause license","text":"Copyright (c) 2023 walkboutr authors Redistribution use source binary forms, without modification, permitted provided following conditions met: Redistributions source code must retain copyright notice, list conditions following disclaimer. Redistributions binary form must reproduce copyright notice, list conditions following disclaimer documentation /materials provided distribution. Neither name copyright holder names contributors may used endorse promote products derived software without specific prior written permission. SOFTWARE PROVIDED COPYRIGHT HOLDERS CONTRIBUTORS “” EXPRESS IMPLIED WARRANTIES, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE DISCLAIMED. EVENT SHALL COPYRIGHT HOLDER CONTRIBUTORS LIABLE DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL DAMAGES (INCLUDING, LIMITED , PROCUREMENT SUBSTITUTE GOODS SERVICES; LOSS USE, DATA, PROFITS; BUSINESS INTERRUPTION) HOWEVER CAUSED THEORY LIABILITY, WHETHER CONTRACT, STRICT LIABILITY, TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING WAY USE SOFTWARE, EVEN ADVISED POSSIBILITY DAMAGE.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lauren Wilner. Author, maintainer.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilner L (2023). walkboutr: Generate Walk Bouts GPS Accelerometry Data. https://github.com/rwalkbout/walkboutr, https://rwalkbout.github.io/walkboutr/.","code":"@Manual{,   title = {walkboutr: Generate Walk Bouts from GPS and Accelerometry Data},   author = {Lauren Wilner},   year = {2023},   note = {https://github.com/rwalkbout/walkboutr, https://rwalkbout.github.io/walkboutr/}, }"},{"path":"https://rwalkbout.github.io/walkboutr/index.html","id":"walkboutr","dir":"","previous_headings":"","what":"Generate Walk Bouts from GPS and Accelerometry Data","title":"Generate Walk Bouts from GPS and Accelerometry Data","text":"goal walkboutr …","code":""},{"path":"https://rwalkbout.github.io/walkboutr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Walk Bouts from GPS and Accelerometry Data","text":"can install development version walkboutr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rwalkbout/walkboutr\")"},{"path":"https://rwalkbout.github.io/walkboutr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Walk Bouts from GPS and Accelerometry Data","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . also use GitHub Actions re-render README.Rmd every time push. example workflow can found : https://github.com/r-lib/actions/tree/v1/examples. can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(walkboutr) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://rwalkbout.github.io/walkboutr/reference/assign_epoch_start_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Epoch Start Time — assign_epoch_start_time","title":"Assign Epoch Start Time — assign_epoch_start_time","text":"Assign Epoch Start Time","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/assign_epoch_start_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Epoch Start Time — assign_epoch_start_time","text":"","code":"assign_epoch_start_time(gps_data, epoch_length)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/assign_epoch_start_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Epoch Start Time — assign_epoch_start_time","text":"gps_data data frame GPS data including column timestamps columns latitude longitude epoch_length duration epoch seconds","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/assign_epoch_start_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Epoch Start Time — assign_epoch_start_time","text":"data frame GPS data additional column indicating epoch start time","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/assign_epoch_start_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign Epoch Start Time — assign_epoch_start_time","text":"Selects closest 30 second increment assign epoch start time takes GPS coordinates associated latest time multiple GPS data points given 30 second increment. function returns data frame GPS data column epoch times.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/collate_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate Arguments\nThis function collates user-provided arguments with pre-defined parameters and constants. — collate_arguments","title":"Collate Arguments\nThis function collates user-provided arguments with pre-defined parameters and constants. — collate_arguments","text":"Collate Arguments function collates user-provided arguments pre-defined parameters constants.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/collate_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate Arguments\nThis function collates user-provided arguments with pre-defined parameters and constants. — collate_arguments","text":"","code":"collate_arguments(..., collated_arguments = NULL)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/collate_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate Arguments\nThis function collates user-provided arguments with pre-defined parameters and constants. — collate_arguments","text":"... named arguments passed user collated_arguments NULL previously collated arguments","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/collate_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate Arguments\nThis function collates user-provided arguments with pre-defined parameters and constants. — collate_arguments","text":"list arguments, including pre-defined parameters constants user-provided arguments.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/constants.html","id":null,"dir":"Reference","previous_headings":"","what":"List of Constants — constants","title":"List of Constants — constants","text":"List Constants","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of Constants — constants","text":"","code":"constants"},{"path":"https://rwalkbout.github.io/walkboutr/reference/constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of Constants — constants","text":"object class list length 10.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of Constants — constants","text":"non_wearing_min_threshold_epochs Number consecutive epochs activity counts 0 constitute non_wearing period. min_wearing_hours_per_day Minimum number hours day individual must wear accelerometer day considered complete. min_gps_obs_within_bout Minimum number GPS observations within bout bout considered complete GPS data. min_gps_coverage_ratio Minimum ratio data points versus without GPS data bout considered complete GPS data. dwellbout_radii_quantile Threshold outliering GPS data points - data points 95th percentile outliered. max_dwellbout_radii_ft Maximum radius, feet, bounding circle considered dwell bout (rather potential walk bout). min_dwellbout_obs Minimum number observations consider something potential dwell bout. max_walking_cpe Maxiumum CPE value accelerometer considered picking activity walking. min_walking_speed_km_h Minimum speed considered walking. max_walking_speed_km_h Maximum speed considered walking.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/evaluate_gps_completeness.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate GPS completeness for each walking bout — evaluate_gps_completeness","title":"Evaluate GPS completeness for each walking bout — evaluate_gps_completeness","text":"function evaluates completeness GPS data walking bout. bout, checks number valid GPS records (speed, latitude, longitude data) greater specified threshold, ratio valid GPS records total records greater specified minimum. conditions met, function considers GPS data bout complete. function also calculates median speed bout.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/evaluate_gps_completeness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate GPS completeness for each walking bout — evaluate_gps_completeness","text":"","code":"evaluate_gps_completeness(   walk_bouts,   min_gps_obs_within_bout,   min_gps_coverage_ratio )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/evaluate_gps_completeness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate GPS completeness for each walking bout — evaluate_gps_completeness","text":"walk_bouts data frame containing information walking bouts, including GPS data. min_gps_obs_within_bout minimum number GPS observations required bout considered complete GPS data. min_gps_coverage_ratio minimum ratio GPS observations valid data total GPS observations bout considered complete GPS data.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/evaluate_gps_completeness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate GPS completeness for each walking bout — evaluate_gps_completeness","text":"data frame containing information GPS completeness median speed bout.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bout categories — generate_bout_category","title":"Generate bout categories — generate_bout_category","text":"Given accelerometer bout data, function generates bout categories, includes dwell bouts, non-walk bouts either slow, fast, vigorous, bouts unknown lack GPS data.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bout categories — generate_bout_category","text":"","code":"generate_bout_category(   walk_bouts,   bout_radii,   gps_completeness,   max_dwellbout_radii_ft,   max_walking_cpe,   min_walking_speed_km_h,   max_walking_speed_km_h )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bout categories — generate_bout_category","text":"walk_bouts data frame contains bout information walking bouts. bout_radii data frame contains bout radii information. gps_completeness data frame contains GPS data completeness information. max_dwellbout_radii_ft numeric scalar specifies maximum radius, feet, bounding circle considered dwell bout. max_walking_cpe numeric scalar specifies maximum activity counts per epoch value accelerometer considered picking activity walking. min_walking_speed_km_h numeric scalar specifies minimum speed considered walking. max_walking_speed_km_h numeric scalar specifies maximum speed considered walking.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bout categories — generate_bout_category","text":"data frame following columns: bout, dwell_bout (T/F), non_walk_too_vigorous (T/F), non_walk_slow (T/F), non_walk_fast (T/F), non_walk_incomplete_gps (T/F)","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_category.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate bout categories — generate_bout_category","text":"function uses bout information walking bouts, bout radii information, GPS data completeness information generate bout categories. function first generates dwell bouts joining bout radii information GPS data completeness information bout column, filters rows bout values missing using filter function. , calculates dwell bout values TRUE complete_gps column TRUE bout_radius column less max_dwellbout_radii_ft. resulting data frame contains bout dwell_bout columns. function joins resulting data frame walking bout data frame using bout column. , non-walk bouts, function calculates whether vigorous, slow, fast. non-walk bouts vigorous, function calculates mean activity_counts bout, sets non_walk_too_vigorous value TRUE mean activity_counts value greater max_walking_cpe. non-walk bouts slow fast, function calculates median speed bout, sets non_walk_slow non_walk_fast value TRUE median speed value less min_walking_speed_km_h greater max_walking_speed_km_h, respectively. Finally, function generates non_walk_incomplete_gps value TRUE complete_gps value FALSE bout. resulting data frame contains following columns: bout, dwell_bout (T/F), non_walk_too_vigorous (T/F), non_walk_slow (T/F), non_walk_fast (T/F), non_walk_incomplete_gps (T/F).","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bounding Circle Radius for Walking Bouts — generate_bout_radius","title":"Generate Bounding Circle Radius for Walking Bouts — generate_bout_radius","text":"function generates bounding circle radius walking bout identified input data. bounding circle defined smallest circle fully contains GPS locations observed walking bout.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bounding Circle Radius for Walking Bouts — generate_bout_radius","text":"","code":"generate_bout_radius(walk_bouts, dwellbout_radii_quantile)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bounding Circle Radius for Walking Bouts — generate_bout_radius","text":"walk_bouts data frame containing GPS locations walking bout, columns \"longitude\", \"latitude\", \"bout\" (unique identifier bout) dwellbout_radii_quantile quantile (0 1) used filter outlying GPS data points generating bounding circle. GPS points distance center greater radius circle contains (1 - dwellbout_radii_quantile) GPS points considered outliers excluded.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_bout_radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bounding Circle Radius for Walking Bouts — generate_bout_radius","text":"data frame containing bout identifier radius bounding circle walking bout.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_gps_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a dataset with date-time, speed, and latitude and longitude of someone moving through space on a walk in Seattle — generate_gps_data","title":"Generate a dataset with date-time, speed, and latitude and longitude of someone moving through space on a walk in Seattle — generate_gps_data","text":"Generate dataset date-time, speed, latitude longitude someone moving space walk Seattle","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_gps_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a dataset with date-time, speed, and latitude and longitude of someone moving through space on a walk in Seattle — generate_gps_data","text":"","code":"generate_gps_data(   start_lat,   start_long,   start_time,   n_epochs = 100,   time_interval = 30 )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_gps_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a dataset with date-time, speed, and latitude and longitude of someone moving through space on a walk in Seattle — generate_gps_data","text":"start_lat starting latitude walk. start_time start time series data n_epochs number epochs series time_interval time interval points seconds. start_lon starting longitude walk.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/generate_gps_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a dataset with date-time, speed, and latitude and longitude of someone moving through space on a walk in Seattle — generate_gps_data","text":"data frame four columns: \"timestamp\", \"lat\", \"lon\", \"speed\".","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_bouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Bouts: — identify_bouts","title":"Identify Bouts: — identify_bouts","text":"Identify Bouts:","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_bouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Bouts: — identify_bouts","text":"","code":"identify_bouts(   accelerometry_counts,   maximum_number_consec_inactive_epochs_in_bout,   active_counts_per_epoch_min,   minimum_bout_length )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_bouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Bouts: — identify_bouts","text":"accelerometry_counts data frame containing accelerometry counts times maximum_number_consec_inactive_epochs_in_bout Maximum number consecutive inactive epochs bout without ending bout active_counts_per_epoch_min Minimum accelerometer counts epoch considered active (vs. inactive) minimum_bout_length Minimum number epochs period activity considered potential bout","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_bouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Bouts: — identify_bouts","text":"data frame columns input data frame accelerometry_counts, new column named bout indicates whether epoch part bout (case gets bout number assigned) (0)","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_bouts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Bouts: — identify_bouts","text":"function partitions accelerometry data bouts activity non-bouts first identifying epochs definitely part bouts. , uses run length encoding partition data potential bouts non-bouts, labels potential bout bout non-bout based whether meets criteria bout length number consecutive inactive epochs allowed. Finally, function adds new column input data frame accelerometry_counts named bout indicates whether epoch part bout (1) (0).","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_complete_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify complete wearing days\nThis function identifies complete days based on accelerometry data by calculating the total number of epochs worn per day and comparing it to the minimum number of wearing epochs per day required to consider a day complete. — identify_complete_days","title":"Identify complete wearing days\nThis function identifies complete days based on accelerometry data by calculating the total number of epochs worn per day and comparing it to the minimum number of wearing epochs per day required to consider a day complete. — identify_complete_days","text":"Identify complete wearing days function identifies complete days based accelerometry data calculating total number epochs worn per day comparing minimum number wearing epochs per day required consider day complete.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_complete_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify complete wearing days\nThis function identifies complete days based on accelerometry data by calculating the total number of epochs worn per day and comparing it to the minimum number of wearing epochs per day required to consider a day complete. — identify_complete_days","text":"","code":"identify_complete_days(   accelerometry_counts,   min_wearing_hours_per_day,   epoch_length,   local_time_zone )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_complete_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify complete wearing days\nThis function identifies complete days based on accelerometry data by calculating the total number of epochs worn per day and comparing it to the minimum number of wearing epochs per day required to consider a day complete. — identify_complete_days","text":"accelerometry_counts data frame containing accelerometry counts non-wearing epochs. min_wearing_hours_per_day Minimum number hours wearing time required day considered complete. epoch_length duration epoch seconds. local_time_zone local time zone data. data come returned UTC, local time zone used compute complete_days.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_complete_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify complete wearing days\nThis function identifies complete days based on accelerometry data by calculating the total number of epochs worn per day and comparing it to the minimum number of wearing epochs per day required to consider a day complete. — identify_complete_days","text":"data frame containing accelerometer counts, non-wearing epochs, binary variable indicating day complete .","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_non_wearing_periods.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify non-wearing periods:\nThis function identifies non-wearing periods in accelerometry data based on a threshold of consecutive epochs with activity counts of 0. — identify_non_wearing_periods","title":"Identify non-wearing periods:\nThis function identifies non-wearing periods in accelerometry data based on a threshold of consecutive epochs with activity counts of 0. — identify_non_wearing_periods","text":"Identify non-wearing periods: function identifies non-wearing periods accelerometry data based threshold consecutive epochs activity counts 0.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_non_wearing_periods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify non-wearing periods:\nThis function identifies non-wearing periods in accelerometry data based on a threshold of consecutive epochs with activity counts of 0. — identify_non_wearing_periods","text":"","code":"identify_non_wearing_periods(   accelerometry_counts,   non_wearing_min_threshold_epochs )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_non_wearing_periods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify non-wearing periods:\nThis function identifies non-wearing periods in accelerometry data based on a threshold of consecutive epochs with activity counts of 0. — identify_non_wearing_periods","text":"accelerometry_counts data frame containing columns time (POSIXct format) activity_counts non_wearing_min_threshold_epochs integer value indicating minimum number consecutive epochs 0 activity counts constitute non-wearing period min_wearing_hours_per_day integer value indicating minimum number hours per day individual must wear accelerometer day considered complete epoch_length integer value indicating duration epoch seconds local_time_zone character string indicating local time zone data - data come returned UTC, local time zone used compute complete_days","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_non_wearing_periods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify non-wearing periods:\nThis function identifies non-wearing periods in accelerometry data based on a threshold of consecutive epochs with activity counts of 0. — identify_non_wearing_periods","text":"data frame columns input data frame accelerometry_counts, new column named non_wearing indicates whether individual wearing accelerometer given period.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_non_wearing_periods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify non-wearing periods:\nThis function identifies non-wearing periods in accelerometry data based on a threshold of consecutive epochs with activity counts of 0. — identify_non_wearing_periods","text":"Identify periods accelerometer worn based activity counts minimum threshold value.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_walk_bouts_in_gps_and_accelerometry_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify walking bouts in GPS and accelerometry data: — identify_walk_bouts_in_gps_and_accelerometry_data","title":"Identify walking bouts in GPS and accelerometry data: — identify_walk_bouts_in_gps_and_accelerometry_data","text":"function identifies walking bouts GPS accelerometry data. processes GPS data accelerometry counts create walk bouts.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_walk_bouts_in_gps_and_accelerometry_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify walking bouts in GPS and accelerometry data: — identify_walk_bouts_in_gps_and_accelerometry_data","text":"","code":"identify_walk_bouts_in_gps_and_accelerometry_data(   gps_data,   accelerometry_counts,   ...,   collated_arguments = NULL )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_walk_bouts_in_gps_and_accelerometry_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify walking bouts in GPS and accelerometry data: — identify_walk_bouts_in_gps_and_accelerometry_data","text":"gps_data data frame containing GPS data accelerometry_counts data frame containing accelerometry counts ... Additional arguments passed function collated_arguments list collated arguments","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/identify_walk_bouts_in_gps_and_accelerometry_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify walking bouts in GPS and accelerometry data: — identify_walk_bouts_in_gps_and_accelerometry_data","text":"data frame containing identified walk bouts","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/next_lat_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the next lat/long coordinate — next_lat_long","title":"Gets the next lat/long coordinate — next_lat_long","text":"Gets next lat/long coordinate","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/next_lat_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the next lat/long coordinate — next_lat_long","text":"","code":"next_lat_long(latitude, longitude, speed, direction, dt)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/next_lat_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the next lat/long coordinate — next_lat_long","text":"speed speed person meters per second. direction initial direction person's movement degrees.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/outlier_gps_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Outlier GPS data points\nThis function identifies outlier GPS points for the bout radius calculation from a given set of latitude and longitude coordinates. — outlier_gps_points","title":"Outlier GPS data points\nThis function identifies outlier GPS points for the bout radius calculation from a given set of latitude and longitude coordinates. — outlier_gps_points","text":"Outlier GPS data points function identifies outlier GPS points bout radius calculation given set latitude longitude coordinates.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/outlier_gps_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outlier GPS data points\nThis function identifies outlier GPS points for the bout radius calculation from a given set of latitude and longitude coordinates. — outlier_gps_points","text":"","code":"outlier_gps_points(lat_long, dwellbout_radii_quantile)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/outlier_gps_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outlier GPS data points\nThis function identifies outlier GPS points for the bout radius calculation from a given set of latitude and longitude coordinates. — outlier_gps_points","text":"lat_long data frame containing latitude longitude coordinates GPS points. dwellbout_radii_quantile threshold outliering GPS data points - data points specified percentile outliered.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/outlier_gps_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outlier GPS data points\nThis function identifies outlier GPS points for the bout radius calculation from a given set of latitude and longitude coordinates. — outlier_gps_points","text":"data frame containing latitude longitude coordinates non-outlier GPS points.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Global parameters and constants — parameters","title":"Global parameters and constants — parameters","text":"List Parameters","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global parameters and constants — parameters","text":"","code":"parameters"},{"path":"https://rwalkbout.github.io/walkboutr/reference/parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Global parameters and constants — parameters","text":"object class list length 5.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global parameters and constants — parameters","text":"epoch_length duration epoch seconds. active_counts_per_epoch_min Minimum accelerometer counts epoch considered active (vs. inactive). minimum_bout_length Minimum number epochs period activity considered potential bout. local_time_zone Local time zone data - data come returned UTC, local time zone used compute complete_days. maximum_number_consec_inactive_epochs_in_bout Number consecutive epochs can labeled inactive bout without ending bout.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rwalkbout.github.io/walkboutr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_accelerometry_counts_into_bouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Accelerometry Counts into Bouts — process_accelerometry_counts_into_bouts","title":"Process Accelerometry Counts into Bouts — process_accelerometry_counts_into_bouts","text":"function processes accelerometry counts bouts activity returns list complete days wearing accelerometer.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_accelerometry_counts_into_bouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Accelerometry Counts into Bouts — process_accelerometry_counts_into_bouts","text":"","code":"process_accelerometry_counts_into_bouts(   accelerometry_counts,   ...,   collated_arguments = NULL )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_accelerometry_counts_into_bouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Accelerometry Counts into Bouts — process_accelerometry_counts_into_bouts","text":"accelerometry_counts data frame two columns: time cpm (counts per minute) ... Additional arguments passed function. collated_arguments optional list previously collated arguments.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_accelerometry_counts_into_bouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Accelerometry Counts into Bouts — process_accelerometry_counts_into_bouts","text":"list complete days wearing accelerometer.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_accelerometry_counts_into_bouts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Accelerometry Counts into Bouts — process_accelerometry_counts_into_bouts","text":"input schema accelerometry data time activity_counts. time column date-time format, UTC time zone, null values. activity_counts positive numeric column null values. function processes accelerometry counts bouts activity returns list complete days wearing accelerometer. function first validates input data first step. second step, function identifies bouts activity based specified minimum number active counts per epoch, maximum number consecutive inactive epochs allowed within bout, minimum bout length. third step, function identifies non-wearing periods based specified threshold consecutive epochs 0 activity counts. fourth step, function identifies complete days wearing accelerometer based specified minimum number hours wearing epoch length. returned list includes information complete day, including start end times day, duration day seconds, number epochs, total number cpm day, bouts activity within day.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_bouts_and_gps_epochs_into_walkbouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Process bouts and GPS epochs into walk bouts — process_bouts_and_gps_epochs_into_walkbouts","title":"Process bouts and GPS epochs into walk bouts — process_bouts_and_gps_epochs_into_walkbouts","text":"function processes bouts GPS epochs walk bouts. uses set parameters constants determine whether epoch active inactive, minimum number epochs period activity considered potential bout, local time zone data, relevant information. takes two data frames, \"bouts\" \"gps_epochs\", returns processed data frame, \"walk_bouts\", added columns \"bout\", \"bout_radius\", \"bout_category\", \"complete_days\", \"non_wearing\", \"speed\".#'","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_bouts_and_gps_epochs_into_walkbouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process bouts and GPS epochs into walk bouts — process_bouts_and_gps_epochs_into_walkbouts","text":"","code":"process_bouts_and_gps_epochs_into_walkbouts(   bouts,   ...,   collated_arguments = NULL )"},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_bouts_and_gps_epochs_into_walkbouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process bouts and GPS epochs into walk bouts — process_bouts_and_gps_epochs_into_walkbouts","text":"bouts data frame containing bout information ... additional arguments passed functions collated_arguments list arguments collated functions","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_bouts_and_gps_epochs_into_walkbouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process bouts and GPS epochs into walk bouts — process_bouts_and_gps_epochs_into_walkbouts","text":"processed data frame, \"walk_bouts\", added columns \"bout\", \"bout_radius\", \"bout_category\", \"complete_days\", \"non_wearing\", \"speed\"#'","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_bouts_and_gps_epochs_into_walkbouts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process bouts and GPS epochs into walk bouts — process_bouts_and_gps_epochs_into_walkbouts","text":"function first collates arguments passed collate_arguments() function. merges \"gps_epochs\" \"bouts\" data frames \"time\" column, orders resulting data frame \"time\". , generates \"bout_radius\" using generate_bout_radius() function, calculates radius bounding circle considered dwell bout. Next, function evaluates completeness GPS data using evaluate_gps_completeness() function, determines number GPS observations within bout ratio data points versus without GPS data. Finally, function generates \"bout_category\" using generate_bout_category() function, determines whether bout walk bout dwell bout, calculates complete days, non-wearing periods, speed. function categorizes bouts following categories: dwell bout non-walk vigorous non-walk slow non-walk fast unknown lack gps NOTE: multiple GPS points associated given epoch interval, use latest possible GPS data point within epoch. , median walking speed calculated latest available GPS data point epoch. NOTE: median speed calculated using GPS data points remain GPS data processing. GPS data points outliered calculation bout radius, , however, included assessment GPS completeness outliers still present GPS data points. NOTE: Outliered data points excluded radius calculation included subsequent functions assess GPS completeness. also returned functions original data new variables.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_gps_data_into_gps_epochs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GPS data into GPS epochs — process_gps_data_into_gps_epochs","title":"Convert GPS data into GPS epochs — process_gps_data_into_gps_epochs","text":"input schema accelerometry data time, latitude, longitude, speed. time column date-time format, UTC time zone, null values. latitude numeric, non-null latitude coordinate -90 90 longitude numeric, non-null longitude coordinate -180 180 speed numeric, non-null value kilometers per hour","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_gps_data_into_gps_epochs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GPS data into GPS epochs — process_gps_data_into_gps_epochs","text":"","code":"process_gps_data_into_gps_epochs(gps_data, ..., collated_arguments = NULL)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_gps_data_into_gps_epochs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GPS data into GPS epochs — process_gps_data_into_gps_epochs","text":"gps_data data frame containing GPS data. Must columns \"Latitude\", \"Longitude\" ... Additional arguments passed function. collated_arguments named list arguments, used avoid naming conflicts calling function part pipeline. Optional.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_gps_data_into_gps_epochs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GPS data into GPS epochs — process_gps_data_into_gps_epochs","text":"data frame columns latitude, longitude, time, speed, time now nearest epoch start time","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/process_gps_data_into_gps_epochs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert GPS data into GPS epochs — process_gps_data_into_gps_epochs","text":"function processes GPS data GPS epochs, epoch duration specified epoch_length.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/run_length_encode.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Length Encoding: — run_length_encode","title":"Run Length Encoding: — run_length_encode","text":"function runs normal run length encoding adds extra variables use calculations.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/run_length_encode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Length Encoding: — run_length_encode","text":"","code":"run_length_encode(x)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/run_length_encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Length Encoding: — run_length_encode","text":"x vector run function ","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/run_length_encode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Length Encoding: — run_length_encode","text":"data.frame columns lengths, values, end, begin","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/summarize_walk_bouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize walking bouts:\nThis function summarizes walking bouts and calculates the median speed, complete day, non-wearing, bout start, and duration of each bout. — summarize_walk_bouts","title":"Summarize walking bouts:\nThis function summarizes walking bouts and calculates the median speed, complete day, non-wearing, bout start, and duration of each bout. — summarize_walk_bouts","text":"Summarize walking bouts: function summarizes walking bouts calculates median speed, complete day, non-wearing, bout start, duration bout.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/summarize_walk_bouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize walking bouts:\nThis function summarizes walking bouts and calculates the median speed, complete day, non-wearing, bout start, and duration of each bout. — summarize_walk_bouts","text":"","code":"summarize_walk_bouts(walk_bouts)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/summarize_walk_bouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize walking bouts:\nThis function summarizes walking bouts and calculates the median speed, complete day, non-wearing, bout start, and duration of each bout. — summarize_walk_bouts","text":"walk_bouts data frame containing identified walk bouts","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/summarize_walk_bouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize walking bouts:\nThis function summarizes walking bouts and calculates the median speed, complete day, non-wearing, bout start, and duration of each bout. — summarize_walk_bouts","text":"data frame summarizing identified walk bouts","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_accelerometry_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate accelerometry input data — validate_accelerometry_data","title":"Validate accelerometry input data — validate_accelerometry_data","text":"input schema accelerometry data time activity_counts. time column date-time format, UTC time zone, null values. activity_counts positive numeric column null values.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_accelerometry_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate accelerometry input data — validate_accelerometry_data","text":"","code":"validate_accelerometry_data(accelerometry_counts)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_accelerometry_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate accelerometry input data — validate_accelerometry_data","text":"accelerometry_counts Raw accelerometry data expected schema.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_accelerometry_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate accelerometry input data — validate_accelerometry_data","text":"function checks schema accelerometry input data raises error schema constraints violated. following schema validations performed input data: input data must contain two columns, named time activity_counts. time column must date-time format, UTC time zone, null values. activity_counts column must positive numeric column null values.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_accelerometry_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate accelerometry input data — validate_accelerometry_data","text":"","code":"# Example usage: data <- data.frame(   time = seq(     as.POSIXct(\"2021-01-01 00:00:00\", tz = \"UTC\"),     as.POSIXct(\"2021-01-01 23:59:59\", tz = \"UTC\"),     by = \"5 mins\"   )) %>%   dplyr::mutate(activity_counts = sample(0:100, length(time), replace = TRUE)) validate_accelerometry_data(data)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_gps_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate GPS data — validate_gps_data","title":"Validate GPS data — validate_gps_data","text":"function validates GPS data required variables, correct variable class, correct data range.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_gps_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate GPS data — validate_gps_data","text":"","code":"validate_gps_data(gps_data)"},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_gps_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate GPS data — validate_gps_data","text":"gps_data data frame containing GPS data following variables: time, latitude, longitude, speed.","code":""},{"path":"https://rwalkbout.github.io/walkboutr/reference/validate_gps_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate GPS data — validate_gps_data","text":"function return anything. throws error GPS data fails validation checks.","code":""}]
